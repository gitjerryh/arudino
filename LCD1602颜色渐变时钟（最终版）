#include <Wire.h>
#include "GravityRtc.h"
#include "DFRobot_RGBLCD1602.h"
#include "DFRobot_EnvironmentalSensor.h"

GravityRtc rtc;
DFRobot_RGBLCD1602 lcd(0x2D, 16, 2);
DFRobot_EnvironmentalSensor environment(SEN050X_DEFAULT_DEVICE_ADDRESS, &Wire);

const char* monthNames[] = {"Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
const char* dayNames[] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};

unsigned long lastUpdate = 0;
unsigned long lastColorChange = 0;
unsigned long lastEnvUpdate = 0;
unsigned long colorDuration = 0;
unsigned long specialEffectStart = 0;
const unsigned long ENV_UPDATE_INTERVAL = 1000;
bool showTimeMode = true;

const unsigned long ENV_DISPLAY_DURATION = 3000;  // 环境显示持续5秒
const float ENV_DISPLAY_PROBABILITY = 0.1;        // 10%的概率切换到环境显示
unsigned long envDisplayStartTime = 0;            // 环境显示开始时间
bool forceTimeDisplay = true;                     // 强制时间显示标志

int currentColor = 0;
float breatheValue = 0;
bool breatheIncreasing = true;
bool inSpecialEffect = false;
int specialEffectStep = 0;
float lastTemp = 0.0;  // 在全局变量区域添加这个变量

// Custom characters
byte clockChar[8] = {
  B00000, B01110, B10101, B10111,
  B10001, B01110, B00000, B00000
};

byte thermometer[8] = {
  B00100, B01010, B01010, B01110,
  B01110, B11111, B11111, B01110
};

byte humidityChar[8] = {
  B00100, B00100, B01110, B01110,
  B11111, B11111, B01110, B00000
};

byte lightChar[8] = {
  B00000, B10101, B01110, B11111,
  B01110, B10101, B00000, B00000
};

// Color themes
const int MORNING_COLORS[][3] = {
  {255, 200, 100}, {255, 150, 50},
  {255, 180, 120}, {200, 150, 100}
};

const int DAY_COLORS[][3] = {
  {100, 200, 255}, {150, 255, 200},
  {255, 255, 200}, {200, 255, 255}
};

const int EVENING_COLORS[][3] = {
  {255, 100, 100}, {255, 150, 50},
  {200, 100, 150}, {150, 100, 200}
};

const int NIGHT_COLORS[][3] = {
  {50, 50, 150}, {100, 50, 150},
  {50, 100, 150}, {100, 100, 200}
};

const int SPECIAL_COLORS[][3] = {
  {255, 255, 255}, {255, 255, 0},
  {255, 0, 0}, {0, 255, 0}, {0, 0, 255}
};



int currentThemeColors[4][3];
int numThemeColors = 4;

// 为每个星期设计不同的动画图案
byte animationFrames[7][4][8] = {
  // 星期日 - 太阳动画
  {
    {B00000,B00100,B10101,B01110,B11111,B01110,B10101,B00100},
    {B00100,B10101,B01110,B11111,B01110,B10101,B00100,B00000},
    {B10101,B01110,B11111,B01110,B10101,B00100,B00000,B00100},
    {B01110,B11111,B01110,B10101,B00100,B00000,B00100,B10101}
  },
  // 星期一 - 月亮动画
  {
    {B00000,B00111,B01111,B01111,B01111,B01111,B00111,B00000},
    {B00000,B01110,B11111,B11111,B11111,B11111,B01110,B00000},
    {B00000,B11100,B11110,B11110,B11110,B11110,B11100,B00000},
    {B00000,B01110,B11111,B11111,B11111,B11111,B01110,B00000}
  },
  // 星期二 - 雨滴动画
  {
    {B00000,B00100,B01110,B11111,B00000,B00100,B01110,B11111},
    {B00100,B01110,B11111,B00000,B00100,B01110,B11111,B00000},
    {B01110,B11111,B00000,B00100,B01110,B11111,B00000,B00100},
    {B11111,B00000,B00100,B01110,B11111,B00000,B00100,B01110}
  },
  // 星期三 - 星星动画
  {
    {B00000,B00100,B01110,B11111,B01110,B10101,B01010,B00000},
    {B00100,B01110,B11111,B01110,B10101,B01010,B00000,B00000},
    {B01110,B11111,B01110,B10101,B01010,B00000,B00100,B00000},
    {B11111,B01110,B10101,B01010,B00000,B00100,B01110,B00000}
  },
  // 星期四 - 心跳动画
  {
    {B00000,B01010,B11111,B11111,B01110,B00100,B00000,B00000},
    {B01010,B11111,B11111,B01110,B00100,B00000,B00000,B00000},
    {B11111,B11111,B01110,B00100,B00000,B00000,B01010,B00000},
    {B11111,B01110,B00100,B00000,B00000,B01010,B11111,B00000}
  },
  // 星期五 - 音符动画
  {
    {B00100,B00110,B00101,B00100,B01100,B11100,B11100,B00000},
    {B00110,B00101,B00100,B01100,B11100,B11100,B00000,B00100},
    {B00101,B00100,B01100,B11100,B11100,B00000,B00100,B00110},
    {B00100,B01100,B11100,B11100,B00000,B00100,B00110,B00101}
  },
  // 星期六 - 花朵动画
  {
    {B00000,B01010,B11111,B11111,B01110,B00100,B00000,B00000},
    {B01010,B11111,B11111,B01110,B00100,B00000,B01010,B00000},
    {B11111,B11111,B01110,B00100,B00000,B01010,B11111,B00000},
    {B11111,B01110,B00100,B00000,B01010,B11111,B11111,B00000}
  }
};


int currentFrame = 0;
unsigned long lastFrameUpdate = 0;
const unsigned long FRAME_INTERVAL = 100; // 动画帧更新间隔

// 添加亮度控制相关的常量
const int MIN_LIGHT = 0;    // 最小光照强度（lux）
const int MAX_LIGHT = 1000; // 最大光照强度（lux）
const float MIN_BRIGHTNESS = 0.2; // 最小亮度比例
const float MAX_BRIGHTNESS = 1.0; // 最大亮度比例
float currentBrightness = MAX_BRIGHTNESS;

// 新增整点特效相关变量
struct HourlyEffect {
    byte patterns[8][8];  // 整点动画帧
    int colors[8][3];     // 整点颜色序列
    int duration;         // 效果持续时间(ms)
    byte type;           // 效果类型(0:扫描, 1:闪烁, 2:波浪, 3:螺旋)
};

// Improved morning effect (Sunrise spiral)
const HourlyEffect MORNING_EFFECT = {
    {
        {B00000,B00000,B00000,B00100,B00000,B00000,B00000,B00000},
        {B00000,B00000,B01110,B01110,B01110,B00000,B00000,B00000},
        {B00000,B01110,B11111,B11111,B11111,B01110,B00000,B00000},
        {B00100,B01110,B11111,B11111,B11111,B01110,B00100,B00000},
        {B01110,B11111,B11111,B11111,B11111,B11111,B01110,B00000},
        {B11111,B11111,B11111,B11111,B11111,B11111,B11111,B00000},
        {B11111,B11111,B11111,B11111,B11111,B11111,B11111,B11111},
        {B01110,B11111,B11111,B11111,B11111,B11111,B01110,B00000}
    },
    {
        {255,100,0}, {255,120,20}, {255,140,40}, {255,160,60},
        {255,180,80}, {255,200,100}, {255,220,120}, {255,240,140}
    },
    5000,
    0
};

// New day effect (Pulsing sun rays)
const HourlyEffect DAY_EFFECT = {
    {
        {B10101,B01110,B11111,B01110,B10101,B00000,B00000,B00000},
        {B00000,B10101,B01110,B11111,B01110,B10101,B00000,B00000},
        {B00000,B00000,B10101,B01110,B11111,B01110,B10101,B00000},
        {B00000,B00000,B00000,B10101,B01110,B11111,B01110,B10101},
        {B10101,B00000,B00000,B00000,B10101,B01110,B11111,B01110},
        {B01110,B10101,B00000,B00000,B00000,B10101,B01110,B11111},
        {B11111,B01110,B10101,B00000,B00000,B00000,B10101,B01110},
        {B01110,B11111,B01110,B10101,B00000,B00000,B00000,B10101}
    },
    {
        {100,200,255}, {150,220,255}, {200,240,255}, {255,255,200},
        {255,240,150}, {255,220,100}, {200,240,255}, {150,220,255}
    },
    6000,
    1
};

// Improved evening effect (Sunset waves)
const HourlyEffect EVENING_EFFECT = {
    {
        {B11111,B11111,B00000,B00000,B00000,B00000,B00000,B00000},
        {B01111,B11111,B11111,B00000,B00000,B00000,B00000,B00000},
        {B00111,B01111,B11111,B11111,B00000,B00000,B00000,B00000},
        {B00011,B00111,B01111,B11111,B11111,B00000,B00000,B00000},
        {B00001,B00011,B00111,B01111,B11111,B11111,B00000,B00000},
        {B00000,B00001,B00011,B00111,B01111,B11111,B11111,B00000},
        {B00000,B00000,B00001,B00011,B00111,B01111,B11111,B11111},
        {B00000,B00000,B00000,B00001,B00011,B00111,B01111,B11111}
    },
    {
        {255,50,0}, {255,30,0}, {200,20,0}, {150,10,0},
        {100,5,0}, {50,0,0}, {25,0,0}, {10,0,0}
    },
    4000,
    2
};

// Enhanced night effect (Twinkling stars)
const HourlyEffect NIGHT_EFFECT = {
    {
        {B10001,B00000,B00100,B00000,B10001,B00000,B00100,B00000},
        {B00000,B01010,B00000,B00100,B00000,B01010,B00000,B00100},
        {B00100,B00000,B10001,B00000,B00100,B00000,B10001,B00000},
        {B00000,B00100,B00000,B01010,B00000,B00100,B00000,B01010},
        {B01010,B00000,B00100,B00000,B01010,B00000,B00100,B00000},
        {B00000,B10001,B00000,B00100,B00000,B10001,B00000,B00100},
        {B00100,B00000,B01010,B00000,B00100,B00000,B01010,B00000},
        {B00000,B00100,B00000,B10001,B00000,B00100,B00000,B10001}
    },
    {
        {50,50,150}, {40,40,130}, {30,30,110}, {20,20,90},
        {10,10,70}, {5,5,50}, {20,20,90}, {40,40,130}
    },
    7000,
    3
};
bool isHourlyEffect = false;
unsigned long hourlyEffectStart = 0;
int hourlyEffectFrame = 0;
const HourlyEffect* currentHourlyEffect = nullptr;

void setColor(int r, int g, int b, float intensity) {
  intensity *= currentBrightness; // 应用全局亮度设置
  lcd.setPWM(lcd.REG_RED, r * intensity);
  lcd.setPWM(lcd.REG_GREEN, g * intensity);
  lcd.setPWM(lcd.REG_BLUE, b * intensity);
}

void adjustBrightness() {
  int lightIntensity = environment.getLuminousIntensity();
  
  // 将光照强度限制在有效范围内
  lightIntensity = constrain(lightIntensity, MIN_LIGHT, MAX_LIGHT);
  
  // 使用映射函数计算亮度
  currentBrightness = MIN_BRIGHTNESS + 
    (MAX_BRIGHTNESS - MIN_BRIGHTNESS) * 
    (float)(lightIntensity - MIN_LIGHT) / (MAX_LIGHT - MIN_LIGHT);
    
  // 使用指数曲线使亮度变化更自然
  currentBrightness = pow(currentBrightness, 0.5);
}

void updateThemeColors(int hour) {
  if (hour >= 6 && hour < 11) {
    memcpy(currentThemeColors, MORNING_COLORS, sizeof(MORNING_COLORS));
  } else if (hour >= 11 && hour < 17) {
    memcpy(currentThemeColors, DAY_COLORS, sizeof(DAY_COLORS));
  } else if (hour >= 17 && hour < 20) {
    memcpy(currentThemeColors, EVENING_COLORS, sizeof(EVENING_COLORS));
  } else {
    memcpy(currentThemeColors, NIGHT_COLORS, sizeof(NIGHT_COLORS));
  }
}

void handleSpecialEffect(unsigned long currentMillis) {
  if (!inSpecialEffect) return;
  
  const int effectDuration = 3000;
  unsigned long elapsedTime = currentMillis - specialEffectStart;
  
  if (elapsedTime > effectDuration) {
    inSpecialEffect = false;
    return;
  }

  int step = (elapsedTime / 200) % 5;
  setColor(
    SPECIAL_COLORS[step][0],
    SPECIAL_COLORS[step][1],
    SPECIAL_COLORS[step][2],
    1.0
  );
}

void displayTime() {
  unsigned long currentMillis = millis();
  
  if (currentMillis - lastFrameUpdate >= FRAME_INTERVAL) {
    lastFrameUpdate = currentMillis;
    currentFrame = (currentFrame + 1) % 4;
    
    // 更新动画字符
    for(int i = 0; i < 4; i++) {
      lcd.customSymbol(4 + i, animationFrames[rtc.week][(currentFrame + i) % 4]);
    }
  }
  
  lcd.clear();
  lcd.write(byte(0));  // 时钟图标
  
  // 显示时间
  lcd.setCursor(2, 0);
  lcd.printf("%02d:%02d:%02d", rtc.hour, rtc.minute, rtc.second);
  
  // 在第一行右侧显示动画
  lcd.setCursor(12, 0);
  lcd.write(byte(4));
  lcd.write(byte(5));
  
  // 显示日期和星期
  lcd.setCursor(0, 1);
  lcd.printf("%s %02d %s", monthNames[rtc.month-1], rtc.day, dayNames[rtc.week]);
  
  // 在第二行右侧显示动画
  lcd.setCursor(12, 1);
  lcd.write(byte(6));
  lcd.write(byte(7));
}

void displayEnvironmental() {
  lcd.clear();
  lcd.write(byte(1));
  lcd.printf(" %.1fC ", environment.getTemperature(TEMP_C));
  lcd.write(byte(2));
  lcd.printf(" %d%%", (int)environment.getHumidity());
  
  lcd.setCursor(0, 1);
  lcd.write(byte(3));
  lcd.printf(" %d lx", (int)environment.getLuminousIntensity());
}

const struct {
  int month;
  int day;
  const char* name;
  const int colors[5][3];
} HOLIDAYS[] = {
  {1, 1, "New Year", {{255,0,0}, {255,215,0}, {255,255,255}, {255,192,203}, {255,69,0}}},
  {12, 25, "Christmas", {{255,0,0}, {0,255,0}, {255,255,255}, {255,215,0}, {0,128,0}}},
  // 可以添加更多节日
};

// 新增天气效果相关变量
float tempHue = 0.0;
float tempOffset = 0.0;
bool isWeatherEffect = false;
unsigned long weatherEffectStart = 0;
const unsigned long WEATHER_EFFECT_DURATION = 5000;

// 新增转场效果变量
bool isTransitioning = false;
unsigned long transitionStart = 0;
const unsigned long TRANSITION_DURATION = 1000;
int oldColors[3];
int newColors[3];

// HSV转RGB颜色转换
void hsvToRgb(float h, float s, float v, int* r, int* g, int* b) {
  float c = v * s;
  float x = c * (1 - abs(fmod(h / 60.0, 2) - 1));
  float m = v - c;
  
  float rt, gt, bt;
  if(h >= 0 && h < 60) {
    rt = c; gt = x; bt = 0;
  } else if(h >= 60 && h < 120) {
    rt = x; gt = c; bt = 0;
  } else if(h >= 120 && h < 180) {
    rt = 0; gt = c; bt = x;
  } else if(h >= 180 && h < 240) {
    rt = 0; gt = x; bt = c;
  } else if(h >= 240 && h < 300) {
    rt = x; gt = 0; bt = c;
  } else {
    rt = c; gt = 0; bt = x;
  }
  
  *r = (rt + m) * 255;
  *g = (gt + m) * 255;
  *b = (bt + m) * 255;
}

// 检查是否是特殊节日
bool checkHoliday(int& index) {
  for(int i = 0; i < sizeof(HOLIDAYS)/sizeof(HOLIDAYS[0]); i++) {
    if(HOLIDAYS[i].month == rtc.month && HOLIDAYS[i].day == rtc.day) {
      index = i;
      return true;
    }
  }
  return false;
}
// New function to handle advanced hourly effects
void handleAdvancedHourlyEffect(unsigned long currentMillis) {
    if (!isHourlyEffect || !currentHourlyEffect) return;
    
    unsigned long effectElapsed = currentMillis - hourlyEffectStart;
    if (effectElapsed >= currentHourlyEffect->duration) {
        isHourlyEffect = false;
        return;
    }
    
    float progress = (float)effectElapsed / currentHourlyEffect->duration;
    int frame = (int)(progress * 8) % 8;
     uint8_t tempPattern[8];
    // Apply effect based on type
    switch(currentHourlyEffect->type) {
        case 0: // Spiral effect
            for(int i = 0; i < 8; i++) {
                memcpy(tempPattern, currentHourlyEffect->patterns[(frame + i) % 8], 8);
                lcd.customSymbol(i, tempPattern);
            }
            break;
            
        case 1: // Pulsing effect
            {
                float pulse = (sin(progress * PI * 4) + 1) / 2;
                int colorIndex = frame;
                setColor(
                    currentHourlyEffect->colors[colorIndex][0] * pulse,
                    currentHourlyEffect->colors[colorIndex][1] * pulse,
                    currentHourlyEffect->colors[colorIndex][2] * pulse,
                    1.0
                );
            }
            break;
            
        case 2: // Wave effect
            {
                float wave = sin(progress * PI * 2);
                for(int i = 0; i < 8; i++) {
                     memcpy(tempPattern, currentHourlyEffect->patterns[(frame + i) % 8], 8);
                    lcd.customSymbol(i, tempPattern);
                }
                setColor(
                    currentHourlyEffect->colors[frame][0],
                    currentHourlyEffect->colors[frame][1],
                    currentHourlyEffect->colors[frame][2],
                    0.5 + wave * 0.5
                );
            }
            break;
            
        case 3: // Twinkling effect
            {
                for(int i = 0; i < 8; i++) {
                    if(random(100) < 20) { // 20% chance to twinkle
                       memcpy(tempPattern, currentHourlyEffect->patterns[random(8)], 8);
                        lcd.customSymbol(i, tempPattern);
                    }
                }
                int colorIndex = random(8);
                setColor(
                    currentHourlyEffect->colors[colorIndex][0],
                    currentHourlyEffect->colors[colorIndex][1],
                    currentHourlyEffect->colors[colorIndex][2],
                    0.3 + random(70) / 100.0
                );
            }
            break;
    }
}
// 处理天气效果
void handleWeatherEffect(unsigned long currentMillis) {
  float temp = environment.getTemperature(TEMP_C);
  float humidity = environment.getHumidity();
  
  // 根据温度调整色相
  tempHue = map(temp, 0, 40, 240, 0); // 冷色到暖色
  
  // 根据湿度调整饱和度
  float saturation = map(humidity, 0, 100, 0.3, 1.0);
  
  int r, g, b;
  hsvToRgb(tempHue, saturation, 1.0, &r, &g, &b);
  
  // 添加波浪效果
  float wave = sin(currentMillis * 0.001 + tempOffset) * 0.2 + 0.8;
  setColor(r, g, b, wave);
  
  tempOffset += 0.1;
}

// 处理颜色转场效果
void handleTransition(unsigned long currentMillis) {
  if(!isTransitioning) return;
  
  float progress = (float)(currentMillis - transitionStart) / TRANSITION_DURATION;
  if(progress >= 1.0) {
    isTransitioning = false;
    return;
  }
  
  // 使用缓动函数使过渡更平滑
  progress = 0.5 - cos(progress * PI) / 2;
  
  int r = oldColors[0] + (newColors[0] - oldColors[0]) * progress;
  int g = oldColors[1] + (newColors[1] - oldColors[1]) * progress;
  int b = oldColors[2] + (newColors[2] - oldColors[2]) * progress;
  
  setColor(r, g, b, breatheValue);
}

// 添加整点特效处理函数
void handleHourlyEffect(unsigned long currentMillis) {
    if (!isHourlyEffect || !currentHourlyEffect) return;
    
    unsigned long effectElapsed = currentMillis - hourlyEffectStart;
    if (effectElapsed >= currentHourlyEffect->duration) {
        isHourlyEffect = false;
        return;
    }
    
    // 更新动画帧
    if (currentMillis - lastFrameUpdate >= 100) {
        lastFrameUpdate = currentMillis;
        hourlyEffectFrame = (hourlyEffectFrame + 1) % 4;
        
        // 使用临时缓冲区更新自定义字符
        uint8_t tempPattern[8];
        for (int i = 4; i < 8; i++) {
            memcpy(tempPattern, currentHourlyEffect->patterns[hourlyEffectFrame], 8);
            lcd.customSymbol(i, tempPattern);
        }
    }
    
    // 根据效果类型执行不同的动画
    float progress = (float)effectElapsed / currentHourlyEffect->duration;
    int colorIndex = (hourlyEffectFrame % 4);
    
    switch (currentHourlyEffect->type) {
        case 0: // 扫描效果
            setColor(
                currentHourlyEffect->colors[colorIndex][0],
                currentHourlyEffect->colors[colorIndex][1],
                currentHourlyEffect->colors[colorIndex][2],
                1.0 - progress
            );
            break;
            
        case 1: // 闪烁效果
            setColor(
                currentHourlyEffect->colors[colorIndex][0],
                currentHourlyEffect->colors[colorIndex][1],
                currentHourlyEffect->colors[colorIndex][2],
                sin(progress * PI * 8) * 0.5 + 0.5
            );
            break;
            
        case 2: // 波浪效果
            setColor(
                currentHourlyEffect->colors[colorIndex][0],
                currentHourlyEffect->colors[colorIndex][1],
                currentHourlyEffect->colors[colorIndex][2],
                sin(progress * PI * 4) * 0.3 + 0.7
            );
            break;
            
        case 3: // 螺旋效果
            setColor(
                currentHourlyEffect->colors[colorIndex][0],
                currentHourlyEffect->colors[colorIndex][1],
                currentHourlyEffect->colors[colorIndex][2],
                cos(progress * PI * 6) * 0.4 + 0.6
            );
            break;
    }
    
    // 显示特效动画
    lcd.clear();
    for (int i = 0; i < 16; i++) {
        lcd.setCursor(i, 0);
        lcd.write(byte(4 + (i % 4)));
        lcd.setCursor(i, 1);
        lcd.write(byte(4 + ((i + 2) % 4)));
    }
}

void setup() {
    Serial.begin(115200);
    
    lcd.init();
    lcd.clear();
    
    lcd.customSymbol(0, clockChar);
    lcd.customSymbol(1, thermometer);
    lcd.customSymbol(2, humidityChar);
    lcd.customSymbol(3, lightChar);
    
    rtc.setup();
    //rtc.adjustRtc(2024,10,24,4,14,28,10);
    
    while(environment.begin() != 0) {
        lcd.clear();
        lcd.print("Sensor Error!");
        delay(1000);
    }
    
    randomSeed(analogRead(0));
    colorDuration = random(3000, 10000);
    
    rtc.read();
    updateThemeColors(rtc.hour);
    for(int i = 0; i < 4; i++) {
        lcd.customSymbol(4 + i, animationFrames[rtc.week][i]);
    }
}

void loop() {
    unsigned long currentMillis = millis();
    
    if (currentMillis - lastEnvUpdate >= ENV_UPDATE_INTERVAL) {
        lastEnvUpdate = currentMillis;
        rtc.read();
        
        // 检查是否是节日
        int holidayIndex;
        if(checkHoliday(holidayIndex)) {
            inSpecialEffect = true;
            specialEffectStart = currentMillis;
            memcpy(currentThemeColors, HOLIDAYS[holidayIndex].colors, sizeof(HOLIDAYS[holidayIndex].colors));
            numThemeColors = 5;
        } else {
            updateThemeColors(rtc.hour);
            numThemeColors = 4;
        }
        
        // 检查温度变化触发天气效果
        float temp = environment.getTemperature(TEMP_C);
        if(abs(temp - lastTemp) > 2.0) {
            isWeatherEffect = true;
            weatherEffectStart = currentMillis;
        }
        lastTemp = temp;
        
        adjustBrightness();
        
        // 新的显示逻辑
        if (!showTimeMode) {
            // 如果当前是环境显示模式，检查是否需要切回时间显示
            if (currentMillis - envDisplayStartTime >= ENV_DISPLAY_DURATION) {
                showTimeMode = true;
                forceTimeDisplay = true;  // 强制显示时间一段时间
            }
            displayEnvironmental();
        } else {
            // 在时间显示模式下，随机决定是否切换到环境显示
            if (!forceTimeDisplay && random(100) < ENV_DISPLAY_PROBABILITY * 100) {
                showTimeMode = false;
                envDisplayStartTime = currentMillis;
                displayEnvironmental();
            } else {
                displayTime();
            }
        }
        
        // 控制强制时间显示的持续时间
        if (forceTimeDisplay && currentMillis - envDisplayStartTime >= 10000) {
            forceTimeDisplay = false;
        }
    }
    
    // 处理各种特效
    if (inSpecialEffect) {
        handleSpecialEffect(currentMillis);
        return;
    }
    
    if (isWeatherEffect) {
        if (currentMillis - weatherEffectStart > WEATHER_EFFECT_DURATION) {
            isWeatherEffect = false;
        } else {
            handleWeatherEffect(currentMillis);
            return;
        }
    }
    
    if (isTransitioning) {
        handleTransition(currentMillis);
        return;
    }
    
    // 检测整点特效
    if (rtc.minute == 0 && rtc.second == 0 && !isHourlyEffect) {
        isHourlyEffect = true;
        hourlyEffectStart = currentMillis;
        hourlyEffectFrame = 0;
        
        // 根据当前时间选择适当的整点效果
        int hour = rtc.hour;
        if (hour >= 6 && hour < 11) {
            currentHourlyEffect = &MORNING_EFFECT;
        } else if (hour >= 11 && hour < 17) {
            currentHourlyEffect = &DAY_EFFECT;
        } else if (hour >= 17 && hour < 20) {
            currentHourlyEffect = &EVENING_EFFECT;
        } else {
            currentHourlyEffect = &NIGHT_EFFECT;
        }
    }
    
    // 处理整点特效
    if (isHourlyEffect) {
        handleHourlyEffect(currentMillis);
        return;
    }
    
    // 颜色切换和呼吸效果的处理保持不变
    if (currentMillis - lastColorChange >= colorDuration) {
        memcpy(oldColors, currentThemeColors[currentColor], sizeof(oldColors));
        currentColor = (currentColor + 1) % numThemeColors;
        memcpy(newColors, currentThemeColors[currentColor], sizeof(newColors));
        
        isTransitioning = true;
        transitionStart = currentMillis;
        lastColorChange = currentMillis;
        colorDuration = random(3000, 10000);
    }
    
    float breatheSpeed = 0.0005;
    if (breatheIncreasing) {
        breatheValue += breatheSpeed;
        if (breatheValue >= 1.0) {
            breatheValue = 1.0;
            breatheIncreasing = false;
        }
    } else {
        breatheValue -= breatheSpeed;
        if (breatheValue <= 0.3) {
            breatheValue = 0.3;
            breatheIncreasing = true;
        }
    }
    
    setColor(
        currentThemeColors[currentColor][0],
        currentThemeColors[currentColor][1],
        currentThemeColors[currentColor][2],
        breatheValue
    );
}
