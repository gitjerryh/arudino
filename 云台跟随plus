#include <HUSKYLENS.h>
#include <Wire.h>
#include <ESP32Servo.h>

HUSKYLENS huskylens;
Servo panServo;
Servo tiltServo;

const int PAN_SERVO_PIN = 12;
const int TILT_SERVO_PIN = 13;

// 先声明PIDController结构体
struct PIDController {
    float Kp = 0.15;    // 降低比例系数减少抖动
    float Ki = 0.004;   // 降低积分系数
    float Kd = 0.08;    // 保持较小的微分系数
    float integral = 0;
    float previousError = 0;
    float integralLimit = 50.0;
};

// 然后声明函数
void resetI2C();
void initializePositionHistory();
void centerGimbal();
void resetControllers();
void moveGimbal(float targetX, float targetY);
void updatePositionHistory(int x, int y);
void predictNextPosition(float &predX, float &predY);
float calculatePID(PIDController &pid, float error, float dt);

// 其他变量声明
PIDController panPID;
PIDController tiltPID;

const int FRAME_WIDTH = 320;
const int FRAME_HEIGHT = 240;
const int FRAME_CENTER_X = FRAME_WIDTH / 2;
const int FRAME_CENTER_Y = FRAME_HEIGHT / 2;

float currentPanPosition = 90;
float currentTiltPosition = 90;

const int DEADBAND = 10;
const int POSITION_HISTORY_SIZE = 6;  // 减少历史记录数量
struct PositionHistory {
    int x[POSITION_HISTORY_SIZE];
    int y[POSITION_HISTORY_SIZE];
    unsigned long timestamp[POSITION_HISTORY_SIZE];
    int index = 0;
};
PositionHistory posHistory;

const float MAX_SPEED = 3.0;         // 降低最大速度
const float MAX_ACCELERATION = 0.4;   // 降低最大加速度
float lastPanSpeed = 0;
float lastTiltSpeed = 0;

enum TrackingState {
    IDLE,
    TRACKING,
    PREDICTING,
    RETURNING
};
TrackingState currentState = IDLE;

unsigned long lastTrackTime = 0;
unsigned long lastRequestTime = 0;    // 添加请求时间控制
const int MIN_REQUEST_INTERVAL = 35;  // 最小请求间隔(ms)
const int PREDICT_THRESHOLD = 100;
const int RETURN_TIMEOUT = 1500;

// 添加连接状态监控
unsigned long lastSuccessfulRequest = 0;
const int CONNECTION_TIMEOUT = 2000;
bool isConnected = false;

struct VelocityEstimator {
    float vx = 0;
    float vy = 0;
    void update(float dx, float dt) {
        const float alpha = 0.6;
        float new_vx = dx / dt;
        vx = alpha * new_vx + (1 - alpha) * vx;
    }
};
VelocityEstimator velocityEstimator;

// 添加学习状态相关的全局变量
bool isLearning = false;
unsigned long learnStartTime = 0;
const unsigned long LEARN_CHECK_INTERVAL = 50;  // 50ms检查间隔

// 添加硬件复位引脚定义
const int HUSKYLENS_RST_PIN = 21;  // 根据实际连接修改引脚号

// 修改I2C时钟频率和超时时间
const uint32_t I2C_CLOCK_SPEED = 50000;  // 降低到50kHz
const uint32_t I2C_TIMEOUT = 1000;  // 增加超时时间到1000ms

// 添加硬件复位函数
void hardwareReset() {
    if(HUSKYLENS_RST_PIN > 0) {
        pinMode(HUSKYLENS_RST_PIN, OUTPUT);
        digitalWrite(HUSKYLENS_RST_PIN, LOW);
        delay(100);
        digitalWrite(HUSKYLENS_RST_PIN, HIGH);
        delay(200);  // 等待模块启动
    }
}

// 修改resetI2C函数
void resetI2C() {
    Wire.end();
    delay(100);
    
    // 尝试硬件复位
    hardwareReset();
    
    Wire.begin();
    Wire.setClock(I2C_CLOCK_SPEED);
    
    // 清理I2C总线
    for(int i = 0; i < 10; i++) {
        Wire.beginTransmission(0x32);
        Wire.endTransmission(true);
        delay(10);
    }
}

// 修改ensureConnection函数
bool ensureConnection() {
    static uint8_t retryCount = 0;
    static uint8_t resetCount = 0;
    static unsigned long lastResetTime = 0;
    
    if (!isConnected || (millis() - lastSuccessfulRequest > CONNECTION_TIMEOUT)) {
        if (retryCount >= 3) {
            Serial.println("Connection failed, resetting I2C...");
            resetI2C();
            retryCount = 0;
            resetCount++;
            lastResetTime = millis();
            
            if (resetCount >= 3) {  // 减少复位次数阈值
                Serial.println("Multiple resets failed, attempting hardware reset...");
                hardwareReset();
                resetCount = 0;
                delay(500);  // 给足够时间启动
            }
        }
        
        Wire.begin();
        Wire.setClock(I2C_CLOCK_SPEED);
        
        // 增加通信前的延时
        delay(50);
        
        if (huskylens.begin(Wire)) {
            delay(100);  // 等待模块稳定
            if (huskylens.writeAlgorithm(ALGORITHM_OBJECT_TRACKING)) {
                delay(50);
                if (huskylens.request()) {
                    isConnected = true;
                    retryCount = 0;
                    resetCount = 0;
                    lastSuccessfulRequest = millis();
                    Serial.println("Connection restored!");
                    return true;
                }
            }
        }
        
        retryCount++;
        delay(200);  // 增加重试间隔
        return false;
    }
    return isConnected;
}

void setup() {
    Serial.begin(115200);
    
    // 初始化复位引脚
    if(HUSKYLENS_RST_PIN > 0) {
        pinMode(HUSKYLENS_RST_PIN, OUTPUT);
        digitalWrite(HUSKYLENS_RST_PIN, HIGH);
    }
    
    Wire.begin();
    Wire.setClock(I2C_CLOCK_SPEED);
    
    // 先进行硬件复位
    hardwareReset();
    
    uint8_t initRetry = 0;
    while (!huskylens.begin(Wire) && initRetry < 5) {
        Serial.println(F("Begin failed! Retrying..."));
        delay(300);
        initRetry++;
        
        if(initRetry == 3) {
            Serial.println("Multiple attempts failed, performing hardware reset...");
            hardwareReset();
        }
    }
    
    if (initRetry >= 5) {
        Serial.println(F("Failed to initialize HUSKYLENS!"));
        while(1); // 停止执行
    }
    
    // 配置算法并验证
    if (!huskylens.writeAlgorithm(ALGORITHM_OBJECT_TRACKING)) {
        Serial.println(F("Failed to set algorithm!"));
        while(1);
    }
    
    // 修改这部分，使用正确的命令重置HUSKYLENS
    // huskylens.forget();  // 删除这行
    if (!huskylens.writeForget()) {  // 使用writeForget替代forget
        Serial.println(F("Failed to reset HUSKYLENS!"));
        delay(100);
    }
    delay(100);
    
    // 配置串口输出
    Serial.println("Initialization complete. Starting main loop...");
    
    ESP32PWM::allocateTimer(0);
    ESP32PWM::allocateTimer(1);
    panServo.setPeriodHertz(50);
    tiltServo.setPeriodHertz(50);
    
    panServo.attach(PAN_SERVO_PIN, 500, 2500);
    tiltServo.attach(TILT_SERVO_PIN, 500, 2500);
    
    initializePositionHistory();
    centerGimbal();
    
    isConnected = true;
    lastSuccessfulRequest = millis();
    
    // 配置HUSKYLENS以发送按钮状态
    Wire.beginTransmission(0x32);
    Wire.write(0x2E);  // 配置命令
    Wire.write(0x01);  // 启用按钮状态报告
    Wire.endTransmission();
}

void initializePositionHistory() {
    unsigned long currentTime = millis();
    for (int i = 0; i < POSITION_HISTORY_SIZE; i++) {
        posHistory.x[i] = FRAME_CENTER_X;
        posHistory.y[i] = FRAME_CENTER_Y;
        posHistory.timestamp[i] = currentTime;
    }
}

float calculatePID(PIDController &pid, float error, float dt) {
    // 动态调整PID参数
    if (abs(error) < DEADBAND) {
        pid.integral *= 0.93;
        return 0;
    }
    
    // 非线性PID控制
    float error_sign = error > 0 ? 1.0 : -1.0;
    float error_mag = abs(error);
    
    // 动态积分控制
    if (error_mag < DEADBAND * 3) {
        pid.integral = constrain(pid.integral + error * dt, -pid.integralLimit, pid.integralLimit);
    } else {
        pid.integral *= 0.95;
    }
    
    // 计算微分项并应用滤波
    float derivative = (error - pid.previousError) / dt;
    derivative = 0.85 * derivative + 0.15 * pid.previousError;
    
    // 非线性输出映射
    float output = (pid.Kp * error) + (pid.Ki * pid.integral) + (pid.Kd * derivative);
    output = pow(abs(output), 0.8) * (output > 0 ? 1 : -1);
    
    pid.previousError = error;
    return output;
}

void updatePositionHistory(int x, int y) {
    posHistory.index = (posHistory.index + 1) % POSITION_HISTORY_SIZE;
    posHistory.x[posHistory.index] = x;
    posHistory.y[posHistory.index] = y;
    posHistory.timestamp[posHistory.index] = millis();
}

void predictNextPosition(float &predX, float &predY) {
    int latest_idx = posHistory.index;
    int oldest_idx = (latest_idx + 1) % POSITION_HISTORY_SIZE;
    
    float dt = (posHistory.timestamp[latest_idx] - posHistory.timestamp[oldest_idx]) / 1000.0;
    if (dt > 0) {
        float dx = posHistory.x[latest_idx] - posHistory.x[oldest_idx];
        float dy = posHistory.y[latest_idx] - posHistory.y[oldest_idx];
        
        velocityEstimator.update(dx, dt);
        
        predX = posHistory.x[latest_idx] + velocityEstimator.vx * 0.1;
        predY = posHistory.y[latest_idx] + velocityEstimator.vy * 0.1;
    } else {
        predX = posHistory.x[latest_idx];
        predY = posHistory.y[latest_idx];
    }
}

void moveGimbal(float targetX, float targetY) {
    float dt = 0.02;
    
    float panError = targetX - FRAME_CENTER_X;
    float tiltError = targetY - FRAME_CENTER_Y;
    
    // 计算PID输出
    float panAdjustment = calculatePID(panPID, panError, dt);
    float tiltAdjustment = calculatePID(tiltPID, tiltError, dt);
    
    // 速度控制
    float desiredPanSpeed = -panAdjustment * 0.12;
    float desiredTiltSpeed = tiltAdjustment * 0.12;
    
    // 加速度限制
    desiredPanSpeed = constrain(desiredPanSpeed, 
                              lastPanSpeed - MAX_ACCELERATION, 
                              lastPanSpeed + MAX_ACCELERATION);
    desiredTiltSpeed = constrain(desiredTiltSpeed, 
                               lastTiltSpeed - MAX_ACCELERATION, 
                               lastTiltSpeed + MAX_ACCELERATION);
    
    // 速度限制
    desiredPanSpeed = constrain(desiredPanSpeed, -MAX_SPEED, MAX_SPEED);
    desiredTiltSpeed = constrain(desiredTiltSpeed, -MAX_SPEED, MAX_SPEED);
    
    // 平滑移动
    float smoothingFactor = 0.45;
    currentPanPosition = currentPanPosition * (1 - smoothingFactor) + 
                        constrain(currentPanPosition + desiredPanSpeed, 0, 180) * smoothingFactor;
    currentTiltPosition = currentTiltPosition * (1 - smoothingFactor) + 
                         constrain(currentTiltPosition + desiredTiltSpeed, 0, 180) * smoothingFactor;
    
    lastPanSpeed = desiredPanSpeed;
    lastTiltSpeed = desiredTiltSpeed;
    
    // 更新舵机位置
    panServo.write(round(currentPanPosition));
    tiltServo.write(round(currentTiltPosition));
}

// 修改学习状态检测函数
bool isInLearningMode() {
    if (!huskylens.request()) return false;
    
    // 检查是否有任何方框
    int blockCount = huskylens.countBlocks();
    if (blockCount == 0) return false;
    
    // 获取第一个方框
    HUSKYLENSResult result = huskylens.getBlock(0);
    
    // 在物体追踪模式下：
    // 1. 学习过程中会显示"Learning"字样
    // 2. 此时方框的ID为1
    // 3. 方框会闪烁
    bool isLearning = (result.ID == 1 && result.width > 50);  // 宽度检查用于确认是学习框
    
    // 添加调试输出
    if (isLearning) {
        Serial.printf("Learning box detected - ID: %d, Width: %d, Height: %d\n",
                     result.ID, result.width, result.height);
    }
    
    return isLearning;
}

// 修改checkLearningState函数
bool checkLearningState() {
    static unsigned long lastCheck = 0;
    static bool buttonState = false;
    static int stableCount = 0;  // 添加状态稳定计数
    
    if (millis() - lastCheck < 20) {
        return buttonState;
    }
    
    lastCheck = millis();
    bool currentState = isInLearningMode();
    
    // 状态防抖
    if (currentState != buttonState) {
        stableCount++;
        if (stableCount >= 3) {  // 需要连续3次检测到状态变化才切换
            buttonState = currentState;
            stableCount = 0;
            Serial.println(buttonState ? "Learning mode confirmed" : "Normal mode confirmed");
        }
    } else {
        stableCount = 0;
    }
    
    return buttonState;
}

void loop() {
    unsigned long currentTime = millis();
    
    // 控制请求频率
    if (currentTime - lastRequestTime < MIN_REQUEST_INTERVAL) {
        delay(5);
        return;
    }
    
    // 检查连接状态
    if (!ensureConnection()) {
        Serial.println("Connection lost, attempting to reconnect...");
        delay(100);
        return;
    }
    
    // 检测I2C总线状态
    Wire.beginTransmission(0x32);
    byte error = Wire.endTransmission();
    if (error != 0) {
        Serial.printf("I2C bus error detected! Error code: %d\n", error);
        isConnected = false;
        delay(100);
        return;
    }
    
    lastRequestTime = currentTime;
    
    // 修改请求重试逻辑
    uint8_t requestRetry = 0;
    bool requestSuccess = false;
    
    while (!requestSuccess && requestRetry < 3) {
        if(huskylens.request()) {
            requestSuccess = true;
            lastSuccessfulRequest = millis();
        } else {
            Serial.printf("Request failed, retry %d/3\n", requestRetry + 1);
            delay(50 * (requestRetry + 1));
            requestRetry++;
        }
    }
    
    if (!requestSuccess) {
        Serial.println("Failed to request data from HUSKYLENS");
        isConnected = false;
        return;
    }
    
    // 检查是否处于学习状态
    if (currentTime - learnStartTime >= LEARN_CHECK_INTERVAL) {
        learnStartTime = currentTime;
        
        bool currentLearningState = checkLearningState();
        if (currentLearningState != isLearning) {
            if (currentLearningState) {
                Serial.println("=== Learning Started ===");
                isLearning = true;
                centerGimbal();
                resetControllers();
                currentState = IDLE;
            } else {
                Serial.println("=== Learning Completed ===");
                isLearning = false;
                
                // 删除这部分，不要清除学习内容
                /*
                if (!huskylens.writeForget()) {
                    Serial.println("Failed to reset HUSKYLENS!");
                }
                delay(100);
                */
                
                // 重新初始化追踪状态
                currentState = IDLE;
                resetControllers();
                lastTrackTime = currentTime;
            }
        }
    }
    
    // 只有在非学习状态下才进行跟踪
    if (!isLearning) {
        if (huskylens.countBlocks()) {
            HUSKYLENSResult result = huskylens.getBlock(0);
            
            // 验证数据有效性
            if (result.xCenter > 0 && result.xCenter < FRAME_WIDTH &&
                result.yCenter > 0 && result.yCenter < FRAME_HEIGHT) {
                
                currentState = TRACKING;
                lastTrackTime = currentTime;
                
                updatePositionHistory(result.xCenter, result.yCenter);
                moveGimbal(result.xCenter, result.yCenter);
                
                Serial.printf("Tracking ID %d - X: %d, Y: %d, Pan: %.1f, Tilt: %.1f\n", 
                            result.ID, result.xCenter, result.yCenter, 
                            currentPanPosition, currentTiltPosition);
            }
        } else if (currentState == TRACKING) {
            // 如果丢失目标，尝试预测
            unsigned long timeSinceLastTrack = currentTime - lastTrackTime;
            if (timeSinceLastTrack < PREDICT_THRESHOLD) {
                currentState = PREDICTING;
                float predX, predY;
                predictNextPosition(predX, predY);
                moveGimbal(predX, predY);
            } else if (timeSinceLastTrack > RETURN_TIMEOUT) {
                currentState = RETURNING;
                centerGimbal();
            }
        }
    } else {
        // 在学习状态下，保持云台在中心位置
        if (currentState != IDLE) {
            centerGimbal();
            currentState = IDLE;
        }
        delay(20);
    }
    
    // 添加更多调试信息
    static unsigned long lastDebugTime = 0;
    if (currentTime - lastDebugTime >= 1000) {  // 每秒打印一次状态
        lastDebugTime = currentTime;
        Serial.printf("State: %s, Learning: %d, Blocks: %d\n",
                     currentState == IDLE ? "IDLE" :
                     currentState == TRACKING ? "TRACKING" :
                     currentState == PREDICTING ? "PREDICTING" : "RETURNING",
                     isLearning,
                     huskylens.countBlocks());
    }
    
    delay(MIN_REQUEST_INTERVAL);
}

void resetControllers() {
    panPID.integral = 0;
    tiltPID.integral = 0;
    panPID.previousError = 0;
    tiltPID.previousError = 0;
    lastPanSpeed = 0;
    lastTiltSpeed = 0;
    velocityEstimator.vx = 0;
    velocityEstimator.vy = 0;
}

void centerGimbal() {
    currentState = IDLE;
    float smoothingFactor = 0.1;
    while (abs(currentPanPosition - 90) > 0.5 || abs(currentTiltPosition - 90) > 0.5) {
        currentPanPosition = currentPanPosition * (1 - smoothingFactor) + 90 * smoothingFactor;
        currentTiltPosition = currentTiltPosition * (1 - smoothingFactor) + 90 * smoothingFactor;
        panServo.write(round(currentPanPosition));
        tiltServo.write(round(currentTiltPosition));
        delay(20);
    }
}
