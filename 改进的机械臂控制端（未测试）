#include <esp_now.h>
#include <WiFi.h>
#include <Wire.h>
#include "DFRobot_BNO055.h"
#include "EMGFilters.h"

// 接收端MAC地址
uint8_t broadcastAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}; // 需要替换为实际的MAC地址

// 定义数据结构
typedef struct struct_message {
    float yaw;
    float pitch;
    float roll;
    bool shouldGrip;
    int gripStrength;
} struct_message;

struct_message myData;

// BNO055传感器初始化
typedef DFRobot_BNO055_IIC    BNO;
BNO   bno(&Wire, 0x28);

// EMG相关变量
#define SensorInputPin A0
unsigned long threshold = 0;  
unsigned long EMG_num = 0;    
EMGFilters myFilter;
SAMPLE_FREQUENCY sampleRate = SAMPLE_FREQ_500HZ;
NOTCH_FREQUENCY humFreq = NOTCH_FREQ_50HZ;

// 函数声明
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status);
void calibrateEMG();
float lowPassFilter(float input, float prev, float alpha = 0.1);
int getEMGCount(int gforce_envelope);

void setup() {
    Serial.begin(115200);
    Wire.begin();
    
    // 初始化WiFi
    WiFi.mode(WIFI_STA);

    // 初始化ESP-NOW
    if (esp_now_init() != ESP_OK) {
        Serial.println("Error initializing ESP-NOW");
        return;
    }

    // 注册发送回调
    esp_now_register_send_cb(OnDataSent);
    
    // 注册对等设备
    esp_now_peer_info_t peerInfo;
    memcpy(peerInfo.peer_addr, broadcastAddress, 6);
    peerInfo.channel = 0;  
    peerInfo.encrypt = false;
    
    if (esp_now_add_peer(&peerInfo) != ESP_OK) {
        Serial.println("Failed to add peer");
        return;
    }

    // 初始化BNO055
    while(bno.begin() != BNO::eStatusOK) {
        Serial.println("bno begin failed");
        delay(2000);
    }
    
    bno.setOprMode(BNO::eOprModeNdof);
    bno.setAccRange(BNO::eAccRange_4G);
    bno.setAccBandWidth(BNO::eAccBandWidth_62_5);

    // 初始化EMG滤波器
    myFilter.init(sampleRate, humFreq, true, true, true);
    
    // 执行EMG校准
    calibrateEMG();
}

void loop() {
    // 获取欧拉角数据并应用低通滤波
    static float yawPrev = 0, pitchPrev = 0, rollPrev = 0;
    BNO::sEulAnalog_t euler = bno.getEul();
    
    float filteredYaw = lowPassFilter(euler.head, yawPrev);
    float filteredPitch = lowPassFilter(euler.pitch, pitchPrev);
    float filteredRoll = lowPassFilter(euler.roll, rollPrev);
    
    yawPrev = filteredYaw;
    pitchPrev = filteredPitch;
    rollPrev = filteredRoll;

    // 处理EMG信号
    int emgData = analogRead(SensorInputPin);
    int dataAfterFilter = myFilter.update(emgData);
    int envelope = sq(dataAfterFilter);
    envelope = (envelope > threshold) ? envelope : 0;
    bool shouldGrip = getEMGCount(envelope);

    // 更新数据结构
    myData.yaw = filteredYaw;
    myData.pitch = filteredPitch;
    myData.roll = filteredRoll;
    myData.shouldGrip = shouldGrip;
    myData.gripStrength = envelope;

    // 发送数据
    esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));
    
    if (result == ESP_OK) {
        Serial.println("Sent with success");
    } else {
        Serial.println("Error sending the data");
    }

    // 打印调试信息
    Serial.printf("Euler: Yaw=%.2f Pitch=%.2f Roll=%.2f Grip=%d\n", 
                 filteredYaw, filteredPitch, filteredRoll, shouldGrip);
    
    delay(20); // 50Hz更新率
}

// 其他函数实现(calibrateEMG, lowPassFilter, getEMGCount)与原代码相同 
