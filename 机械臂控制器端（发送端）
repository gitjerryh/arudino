#include <esp_now.h>
#include <WiFi.h>
#include "DFRobot_BNO055.h"
#include "EMGFilters.h"
#include <Wire.h>

#define SensorInputPin A0     // 肌电传感器输入引脚
#define FILTER_ALPHA 0.1      // 低通滤波器系数

// 接收端MAC地址（需要根据实际接收端ESP32的MAC地址修改）
uint8_t receiverMacAddress[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};

typedef DFRobot_BNO055_IIC    BNO;
BNO   bno(&Wire, 0x28);

// EMG相关变量
unsigned long threshold = 0;  
EMGFilters myFilter;
SAMPLE_FREQUENCY sampleRate = SAMPLE_FREQ_500HZ;
NOTCH_FREQUENCY humFreq = NOTCH_FREQ_50HZ;

// 数据传输结构体
struct ControlData {
  float yaw;
  float pitch;
  float roll;
  bool shouldGrip;
};

// ESP-NOW回调函数
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("Last Packet Send Status: ");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

void printLastOperateStatus(BNO::eStatus_t eStatus) {
  switch(eStatus) {
    case BNO::eStatusOK:    Serial.println("everything ok"); break;
    case BNO::eStatusErr:   Serial.println("unknow error"); break;
    case BNO::eStatusErrDeviceNotDetect:    Serial.println("device not detected"); break;
    case BNO::eStatusErrDeviceReadyTimeOut: Serial.println("device ready time out"); break;
    case BNO::eStatusErrDeviceStatus:       Serial.println("device internal status error"); break;
    default: Serial.println("unknow status"); break;
  }
}

void setup() {
  Serial.begin(115200);
  
  // 初始化WiFi
  WiFi.mode(WIFI_STA);

  // 初始化ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // 注册发送回调
  esp_now_register_send_cb(OnDataSent);

  // 添加配对
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, receiverMacAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
    return;
  }

  // 初始化BNO055传感器
  bno.reset();
  while(bno.begin() != BNO::eStatusOK) {
    Serial.println("bno begin failed");
    printLastOperateStatus(bno.lastOperateStatus);
    delay(2000);
  }
  
  // 配置BNO055
  bno.setOprMode(BNO::eOprModeNdof);
  bno.setAccRange(BNO::eAccRange_4G);
  bno.setAccBandWidth(BNO::eAccBandWidth_62_5);

  // 初始化EMG滤波器
  myFilter.init(sampleRate, humFreq, true, true, true);
  
  // 执行EMG校准
  calibrateEMG();
}

void calibrateEMG() {
  Serial.println("Starting EMG calibration...");
  long sum = 0;
  const int samples = 100;
  for (int i = 0; i < samples; i++) {
    int emgData = analogRead(SensorInputPin);
    sum += abs(emgData);
    delay(10);
  }
  threshold = sum / samples * 1.5;
  Serial.print("Calibration done, threshold = ");
  Serial.println(threshold);
}

float lowPassFilter(float input, float prev, float alpha) {
  return alpha * input + (1 - alpha) * prev;
}

int getEMGCount(int gforce_envelope) {
  static long integralData = 0;
  static long integralDataEve = 0;
  static bool remainFlag = false;
  static unsigned long timeMillis = 0;
  static unsigned long timeBeginzero = 0;
  static int TimeStandard = 200;

  integralDataEve = integralData;
  integralData += gforce_envelope;

  if ((integralDataEve == integralData) && (integralDataEve != 0)) {
    timeMillis = millis();
    if (remainFlag) {
      timeBeginzero = timeMillis;
      remainFlag = false;
      return 0;
    }
    if ((timeMillis - timeBeginzero) > TimeStandard) {
      integralDataEve = integralData = 0;
      return 1;
    }
    return 0;
  } else {
    remainFlag = true;
    return 0;
  }
}

void loop() {
  static float yawPrev = 0, pitchPrev = 0, rollPrev = 0;
  
  // 获取欧拉角数据并应用低通滤波
  BNO::sEulAnalog_t euler = bno.getEul();
  
  float filteredYaw = lowPassFilter(euler.head, yawPrev, FILTER_ALPHA);
  float filteredPitch = lowPassFilter(euler.pitch, pitchPrev, FILTER_ALPHA);
  float filteredRoll = lowPassFilter(euler.roll, rollPrev, FILTER_ALPHA);
  
  yawPrev = filteredYaw;
  pitchPrev = filteredPitch;
  rollPrev = filteredRoll;

  // 处理EMG信号
  int emgData = analogRead(SensorInputPin);
  int dataAfterFilter = myFilter.update(emgData);
  int envelope = sq(dataAfterFilter);
  envelope = (envelope > threshold) ? envelope : 0;
  bool shouldGrip = getEMGCount(envelope);

  // 准备发送数据
  ControlData data;
  data.yaw = filteredYaw;
  data.pitch = filteredPitch;
  data.roll = filteredRoll;
  data.shouldGrip = shouldGrip;

  // 发送数据
  esp_err_t result = esp_now_send(receiverMacAddress, (uint8_t *)&data, sizeof(ControlData));
  if (result == ESP_OK) {
    Serial.println("Sent with success");
  } else {
    Serial.println("Error sending the data");
  }

  // 打印调试信息
  Serial.print("Euler: Yaw=");
  Serial.print(filteredYaw);
  Serial.print(" Pitch=");
  Serial.print(filteredPitch);
  Serial.print(" Roll=");
  Serial.println(filteredRoll);
  
  delay(20); // 50Hz发送频率
}
