#include <HUSKYLENS.h>
#include <Wire.h>
#include <ESP32Servo.h>

HUSKYLENS huskylens;
Servo panServo;
Servo tiltServo;

const int PAN_SERVO_PIN = 12;
const int TILT_SERVO_PIN = 13;

// PID参数微调
struct PIDController {
    float Kp = 0.15;    // 降低比例系数减少抖动
    float Ki = 0.004;   // 降低积分系数
    float Kd = 0.08;    // 保持较小的微分系数
    float integral = 0;
    float previousError = 0;
    float integralLimit = 50.0;
};

PIDController panPID;
PIDController tiltPID;

const int FRAME_WIDTH = 320;
const int FRAME_HEIGHT = 240;
const int FRAME_CENTER_X = FRAME_WIDTH / 2;
const int FRAME_CENTER_Y = FRAME_HEIGHT / 2;

float currentPanPosition = 90;
float currentTiltPosition = 90;

const int DEADBAND = 10;
const int POSITION_HISTORY_SIZE = 6;  // 减少历史记录数量
struct PositionHistory {
    int x[POSITION_HISTORY_SIZE];
    int y[POSITION_HISTORY_SIZE];
    unsigned long timestamp[POSITION_HISTORY_SIZE];
    int index = 0;
};
PositionHistory posHistory;

const float MAX_SPEED = 3.0;         // 降低最大速度
const float MAX_ACCELERATION = 0.4;   // 降低最大加速度
float lastPanSpeed = 0;
float lastTiltSpeed = 0;

enum TrackingState {
    IDLE,
    TRACKING,
    PREDICTING,
    RETURNING
};
TrackingState currentState = IDLE;

unsigned long lastTrackTime = 0;
unsigned long lastRequestTime = 0;    // 添加请求时间控制
const int MIN_REQUEST_INTERVAL = 35;  // 最小请求间隔(ms)
const int PREDICT_THRESHOLD = 100;
const int RETURN_TIMEOUT = 1500;

// 添加连接状态监控
unsigned long lastSuccessfulRequest = 0;
const int CONNECTION_TIMEOUT = 2000;
bool isConnected = false;

struct VelocityEstimator {
    float vx = 0;
    float vy = 0;
    void update(float dx, float dt) {
        const float alpha = 0.6;
        float new_vx = dx / dt;
        vx = alpha * new_vx + (1 - alpha) * vx;
    }
};
VelocityEstimator velocityEstimator;

// 添加通信重试机制
bool ensureConnection() {
    static uint8_t retryCount = 0;
    if (!isConnected || (millis() - lastSuccessfulRequest > CONNECTION_TIMEOUT)) {
        if (retryCount < 3) {
            Wire.begin();
            if (huskylens.begin(Wire)) {
                huskylens.writeAlgorithm(ALGORITHM_OBJECT_TRACKING); // 重新设置算法
                isConnected = true;
                retryCount = 0;
                return true;
            }
            retryCount++;
            delay(100);
        } else {
            retryCount = 0;
            return false;
        }
    }
    return isConnected;
}

void initializePositionHistory();
void centerGimbal();
void resetControllers();
void moveGimbal(float targetX, float targetY);

void setup() {
    Serial.begin(115200);
    Wire.begin();
    Wire.setClock(100000); // 降低I2C速度到100kHz
    
    while (!huskylens.begin(Wire)) {
        Serial.println(F("Connecting to HUSKYLENS..."));
        delay(200);
    }
    
    huskylens.writeAlgorithm(ALGORITHM_OBJECT_TRACKING);
    
    ESP32PWM::allocateTimer(0);
    ESP32PWM::allocateTimer(1);
    panServo.setPeriodHertz(50);
    tiltServo.setPeriodHertz(50);
    
    panServo.attach(PAN_SERVO_PIN, 500, 2500);
    tiltServo.attach(TILT_SERVO_PIN, 500, 2500);
    
    initializePositionHistory();
    centerGimbal();
    
    isConnected = true;
    lastSuccessfulRequest = millis();
}

void initializePositionHistory() {
    unsigned long currentTime = millis();
    for (int i = 0; i < POSITION_HISTORY_SIZE; i++) {
        posHistory.x[i] = FRAME_CENTER_X;
        posHistory.y[i] = FRAME_CENTER_Y;
        posHistory.timestamp[i] = currentTime;
    }
}

float calculatePID(PIDController &pid, float error, float dt) {
    // 动态调整PID参数
    if (abs(error) < DEADBAND) {
        pid.integral *= 0.93;
        return 0;
    }
    
    // 非线性PID控制
    float error_sign = error > 0 ? 1.0 : -1.0;
    float error_mag = abs(error);
    
    // 动态积分控制
    if (error_mag < DEADBAND * 3) {
        pid.integral = constrain(pid.integral + error * dt, -pid.integralLimit, pid.integralLimit);
    } else {
        pid.integral *= 0.95;
    }
    
    // 计算微分项并应用滤波
    float derivative = (error - pid.previousError) / dt;
    derivative = 0.85 * derivative + 0.15 * pid.previousError;
    
    // 非线性输出映射
    float output = (pid.Kp * error) + (pid.Ki * pid.integral) + (pid.Kd * derivative);
    output = pow(abs(output), 0.8) * (output > 0 ? 1 : -1);
    
    pid.previousError = error;
    return output;
}

void updatePositionHistory(int x, int y) {
    posHistory.index = (posHistory.index + 1) % POSITION_HISTORY_SIZE;
    posHistory.x[posHistory.index] = x;
    posHistory.y[posHistory.index] = y;
    posHistory.timestamp[posHistory.index] = millis();
}

void predictNextPosition(float &predX, float &predY) {
    int latest_idx = posHistory.index;
    int oldest_idx = (latest_idx + 1) % POSITION_HISTORY_SIZE;
    
    float dt = (posHistory.timestamp[latest_idx] - posHistory.timestamp[oldest_idx]) / 1000.0;
    if (dt > 0) {
        float dx = posHistory.x[latest_idx] - posHistory.x[oldest_idx];
        float dy = posHistory.y[latest_idx] - posHistory.y[oldest_idx];
        
        velocityEstimator.update(dx, dt);
        
        predX = posHistory.x[latest_idx] + velocityEstimator.vx * 0.1;
        predY = posHistory.y[latest_idx] + velocityEstimator.vy * 0.1;
    } else {
        predX = posHistory.x[latest_idx];
        predY = posHistory.y[latest_idx];
    }
}

void moveGimbal(float targetX, float targetY) {
    float dt = 0.02;
    
    float panError = targetX - FRAME_CENTER_X;
    float tiltError = targetY - FRAME_CENTER_Y;
    
    // 计算PID输出
    float panAdjustment = calculatePID(panPID, panError, dt);
    float tiltAdjustment = calculatePID(tiltPID, tiltError, dt);
    
    // 速度控制
    float desiredPanSpeed = -panAdjustment * 0.12;
    float desiredTiltSpeed = tiltAdjustment * 0.12;
    
    // 加速度限制
    desiredPanSpeed = constrain(desiredPanSpeed, 
                              lastPanSpeed - MAX_ACCELERATION, 
                              lastPanSpeed + MAX_ACCELERATION);
    desiredTiltSpeed = constrain(desiredTiltSpeed, 
                               lastTiltSpeed - MAX_ACCELERATION, 
                               lastTiltSpeed + MAX_ACCELERATION);
    
    // 速度限制
    desiredPanSpeed = constrain(desiredPanSpeed, -MAX_SPEED, MAX_SPEED);
    desiredTiltSpeed = constrain(desiredTiltSpeed, -MAX_SPEED, MAX_SPEED);
    
    // 平滑移动
    float smoothingFactor = 0.45;
    currentPanPosition = currentPanPosition * (1 - smoothingFactor) + 
                        constrain(currentPanPosition + desiredPanSpeed, 0, 180) * smoothingFactor;
    currentTiltPosition = currentTiltPosition * (1 - smoothingFactor) + 
                         constrain(currentTiltPosition + desiredTiltSpeed, 0, 180) * smoothingFactor;
    
    lastPanSpeed = desiredPanSpeed;
    lastTiltSpeed = desiredTiltSpeed;
    
    // 更新舵机位置
    panServo.write(round(currentPanPosition));
    tiltServo.write(round(currentTiltPosition));
}

void loop() {
    unsigned long currentTime = millis();
    
    // 控制请求频率
    if (currentTime - lastRequestTime < MIN_REQUEST_INTERVAL) {
        delay(5);
        return;
    }
    
    // 检查连接状态
    if (!ensureConnection()) {
        Serial.println("Connection lost, attempting to reconnect...");
        delay(100);
        return;
    }
    
    lastRequestTime = currentTime;
    
    if (!huskylens.request()) {
        Serial.println("Failed to request data from HUSKYLENS");
        delay(MIN_REQUEST_INTERVAL);
        return;
    }
    
    lastSuccessfulRequest = currentTime;
    
    if (huskylens.countBlocks()) {
        HUSKYLENSResult result = huskylens.getBlock(0);
        
        // 验证数据有效性
        if (result.xCenter < 0 || result.xCenter > FRAME_WIDTH ||
            result.yCenter < 0 || result.yCenter > FRAME_HEIGHT) {
            Serial.println("Invalid coordinates received");
            return;
        }
        
        currentState = TRACKING;
        lastTrackTime = currentTime;
        
        updatePositionHistory(result.xCenter, result.yCenter);
        moveGimbal(result.xCenter, result.yCenter);
        
        Serial.printf("Tracking - X: %d, Y: %d, Pan: %.1f, Tilt: %.1f\n", 
                     result.xCenter, result.yCenter, currentPanPosition, currentTiltPosition);
    } else {
        unsigned long timeSinceLastTrack = currentTime - lastTrackTime;
        
        if (currentState == TRACKING && timeSinceLastTrack < PREDICT_THRESHOLD) {
            currentState = PREDICTING;
            float predX, predY;
            predictNextPosition(predX, predY);
            moveGimbal(predX, predY);
        } else if (timeSinceLastTrack > RETURN_TIMEOUT) {
            if (currentState != IDLE) {
                currentState = RETURNING;
                centerGimbal();
                resetControllers();
            }
        }
    }
    
    delay(MIN_REQUEST_INTERVAL);
}

void resetControllers() {
    panPID.integral = 0;
    tiltPID.integral = 0;
    panPID.previousError = 0;
    tiltPID.previousError = 0;
    lastPanSpeed = 0;
    lastTiltSpeed = 0;
    velocityEstimator.vx = 0;
    velocityEstimator.vy = 0;
}

void centerGimbal() {
    currentState = IDLE;
    float smoothingFactor = 0.1;
    while (abs(currentPanPosition - 90) > 0.5 || abs(currentTiltPosition - 90) > 0.5) {
        currentPanPosition = currentPanPosition * (1 - smoothingFactor) + 90 * smoothingFactor;
        currentTiltPosition = currentTiltPosition * (1 - smoothingFactor) + 90 * smoothingFactor;
        panServo.write(round(currentPanPosition));
        tiltServo.write(round(currentTiltPosition));
        delay(20);
    }
}
