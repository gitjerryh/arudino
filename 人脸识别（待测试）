#include <Wire.h>
#include <Arduino.h>

// 定义通信命令帧格式
#define HEADER1 0x55
#define HEADER2 0xAA
#define ADDRESS 0x11

// 定义命令
#define COMMAND_REQUEST_KNOCK 0x2C      // 请求初始化命令
#define COMMAND_REQUEST_ALGORITHM 0x2D  // 切换算法命令
#define COMMAND_REQUEST_LEARN 0x36      // 学习面部命令
#define COMMAND_REQUEST_FORGET 0x37     // 遗忘面部命令
#define COMMAND_RETURN_OK 0x2E           // 返回成功命令
#define COMMAND_RETURN_BUSY 0x3D         // 返回忙碌命令

// 定义算法
#define ALGORITHM_FACE_RECOGNITION 0x00  // 人脸识别算法

// 向 HuskyLens 发送命令的函数
void sendCommand(byte command, byte dataLength, byte* data) {
  // 计算校验和
  byte checksum = HEADER1 + HEADER2 + ADDRESS + dataLength + command;
  for (int i = 0; i < dataLength; i++) {
    checksum += data[i];
  }
  
  // 发送命令帧
  Wire.beginTransmission(ADDRESS);
  Wire.write(HEADER1);
  Wire.write(HEADER2);
  Wire.write(ADDRESS);
  Wire.write(dataLength);
  Wire.write(command);
  for (int i = 0; i < dataLength; i++) {
    Wire.write(data[i]);
  }
  Wire.write(checksum);
  Wire.endTransmission();
}

// 从 HuskyLens 接收响应的函数
bool receiveResponse(byte* data, int dataLength) {
  Wire.requestFrom(ADDRESS, dataLength + 6); // 请求帧头和数据总长度
  if (Wire.available() >= dataLength + 6) {
    // 接收命令帧
    byte header1 = Wire.read();
    byte header2 = Wire.read();
    byte address = Wire.read();
    byte length = Wire.read();
    byte command = Wire.read();
    for (int i = 0; i < dataLength; i++) {
      data[i] = Wire.read();
    }
    byte checksum = Wire.read();

    // 验证校验和
    byte calculatedChecksum = header1 + header2 + address + length + command;
    for (int i = 0; i < dataLength; i++) {
      calculatedChecksum += data[i];
    }
    return (checksum == calculatedChecksum);
  }
  return false;
}

// 切换到人脸识别算法
void setFaceRecognitionAlgorithm() {
  byte data[] = {ALGORITHM_FACE_RECOGNITION, 0x00};  // 设置为人脸识别算法
  sendCommand(COMMAND_REQUEST_ALGORITHM, sizeof(data), data);

  // 检查响应
  byte response[1];
  if (receiveResponse(response, sizeof(response)) && response[0] == COMMAND_RETURN_OK) {
    Serial.println("切换到人脸识别算法成功。");
  } else {
    Serial.println("切换到人脸识别算法失败。");
  }
}

// 执行面部识别的函数
void faceRecognition() {
  // 发送学习命令
  byte data[] = {0x01, 0x00}; // ID = 1，表示学习第一个面部
  sendCommand(COMMAND_REQUEST_LEARN, sizeof(data), data);
  
  // 接收响应
  byte response[2]; // 响应缓冲区
  if (receiveResponse(response, sizeof(response))) {
    // 检查响应
    if (response[0] == COMMAND_RETURN_OK) {
      Serial.println("面部学习成功。");
    } else {
      Serial.println("学习面部时出错。");
    }
  }
  
  // 发送遗忘命令
  byte emptyData[] = {0x00};
  sendCommand(COMMAND_REQUEST_FORGET, 0, emptyData);
  
  // 接收响应
  if (receiveResponse(response, sizeof(response))) {
    // 检查响应
    if (response[0] == COMMAND_RETURN_OK) {
      Serial.println("面部遗忘成功。");
    } else {
      Serial.println("遗忘面部时出错。");
    }
  }
}

void setup() {
  Serial.begin(115200);
  Wire.begin();
  
  // 初始化 HuskyLens
  sendCommand(COMMAND_REQUEST_KNOCK, 0, NULL);
  
  // 接收响应
  byte response[2];
  if (receiveResponse(response, sizeof(response))) {
    if (response[0] == COMMAND_RETURN_OK) {
      Serial.println("HuskyLens 初始化成功。");
    } else {
      Serial.println("初始化 HuskyLens 时出错。");
    }
  }

  // 切换到人脸识别算法
  setFaceRecognitionAlgorithm();
}

void loop() {
  faceRecognition(); // 执行面部识别流程
  delay(5000);       // 每次循环延时 5 秒
}
